/* Module for making requests to /videos/ endpoints in Viuteca API */
import {API_URL_DEV} from '../config/config'
import axios from "axios"
import Video from '../firebase/videos';

const PATH = API_URL_DEV + '/videos/';


export const getVideoById = async (videoId) => new Promise((resolve, reject) => {
    if (!videoId) {
        reject('Video id parameter is null');
    }
    const path = PATH + videoId;

    axios.get(path).then(
        (response) => {
            const Video = response.data;
            resolve(Video);
        },
        (error) => {
            console.error('VIUTECA: ', error);
            reject("El video especificado no existe :(");
        }
    );
} ) 


export const createVideo = async (videoData) => new Promise((resolve, reject) => {
    /* Creates video without an image url */
    let {
        title,
        description,
        video_url,
        profile_id,  // uid generated by Auth
        dt,
    } = videoData;  // may contain undefined fields,

    if (!profile_id) reject('Permission to create video denied.');

    if (!(title && description && video_url && dt)) {
        reject('Required fields are empty: Title, Description, Video and Date');
    }

    let newData = {}

    for (let [key, value] of Object.entries(videoData)) {
        if (value === undefined || value === null || value === '') {
            continue;
        }
        else if (typeof value === 'string' || value instanceof String) {
            newData[key] = value.trim();
        } else {
            newData[key] = value;
        }
    }

    console.log("Create new Video with data:", newData);

    const path = PATH;  // id is created automatically
    console.log('Post to', path);
    axios.post(path, newData).then(
        (response) => {
            console.log('create API returned', response)
            resolve('Se creÃ³ el video exitosamente');
        },
        (error) => {
            console.error('VIUTECA: ', error);
            reject(`Error creando video: ${title} :(`);
        }
    );
})


export const addImageToVideo = async(id, imageFile) => {
    // 
    let ok;
    try {
        await getVideoById(id);
    }
    catch (err) {
        return {
            error: "Video for image could not be found in PG",
        }
    }

    const resp = await Video.uploadImagePG(id, imageFile);

    return resp; // {error, url}
}